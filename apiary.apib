FORMAT: 1A
HOST: https://api.partner.mallpay.cz

# Skip Pay API for partners
API documentation for Skip Pay partners.

## Getting started
This online document describes Skip Pay API - the means for partner e-shops through which they can offer their customers the benefits of one of Skip Pay's payment method.

The aim of here described services is to allow customers the smooth running through the process of an online purchase. The services that allow achieving this goal are divided into the following groups:

| Group of services       | Purpose                                                                                                                                                                                                 |
| ---                     | ---                                                                                                                                                                                                     |
| Security                | Security rules and principles                                                                                                                                                                           |
| Application operations  | Services that allows processing of *application* and *order* during their whole lifecycle                                                                                                               |
| Precheck operations     | Services that allow partner e-shops find out a probability of *application's* approval and limits of particular *customer*, if known to Skip Pay                                                        |
| Merchantsite operations | Services that should be developed and exposed by partner e-shops to allow Skip Pay asynchronously inform these partner e-shops about important changes regarding particular *applications* and *orders* |
| Health check            | Health check usage description                                                                                                                                                                          |

### Skip Pay payment
The most basic and minimum way how to implement Skip Pay's payment is to at least implement:
1. [Login](#reference/security/login-partner)
    - Needed for all operations.
1. [Create application](#reference/application-operations/create-application)
    - Called with all order and customer data after finishing the order.
1. Redirect handlers.
    - Special URLs for customers that shows payment success or rejection.
1. [Application notification](#reference/merchantsite-operations/application-notification)
1. [Mark order items as sent](#reference/application-operations/mark-order-items-as-sent)  or [Mark order items as delivered](#reference/application-operations/mark-order-items-as-delivered) (depends when merchant invoices the order)
    - Skip Pay won't send money if the order (order items) is not marked as `SENT` / `DELIVERED`.

[![Sequence diagram of minimum implementation](https://github.com/mall-pay/payments-API/raw/master/images/SequenceDiagramMinimum.png)](https://github.com/mall-pay/payments-API/raw/master/images/SequenceDiagramMinimum.png)

It's always needed to send all attributes marked as required, but filling optional parameters will result in better application approval rate. You should always consider to fill the most attributes as possible. Contact the sales support to find out which attributes correlate with approval rate the most.

### Recurring on demand

You can extend basic Skip Pay payment option with recurring option. This feature allows you to create recurring payments such a subscriptions. It allows you to create recurring orders without customer's presence (all actions are performed in the background without the customer or with the customer not leaving the e-shop to the payment gateway). This feature is not allowed with `PAY_IN_THREE` type and is not enabled for everyone by default. If you want to use it please contact us.

It behaves almost the same as the previous application flow. You need to create an application with all required attributes. But in this case you must force to remember customer authorization by `isRecurring=true`. Our system will return ID of customer's authorization called **recurrence**. Save it.

For making other orders (without customer's authorization) call `/financing/v1/recurrences/{id}/applications` endpoint with ID of recurrence. Skip Pay will automatically approve the application if all conditions are OK. The way to find out the result of the application is the same as for common applications (notification endpoint or application state).

[![Sequence diagram of recurrences](https://github.com/mall-pay/payments-API/raw/master/images/SequenceDiagramRecurrences.png)](https://github.com/mall-pay/payments-API/raw/master/images/SequenceDiagramRecurrences.png)

Of course you can use recurrence ID multiple times but it has some limitations. First of all, check if the recurrence is ready to be used (must be authorized by the customer and the first order must be approved). Another reasons to reject your request are insufficient limit, the recurrence was not used for more than 13 months or the first order (or just the recurrence itself) is cancelled (by you or us).

You can check the recurrence state anytime on `/financing/v1/recurrences/{id}`.

### Application states
Applications have their own state and substates that can be managed by Skip Pay and merchants. 

Existing states are listed below:

| Application state | Recurrence allowed state(s)     | Description                                                                                  |
| ---               | ---                             | ---                                                                                          |
| `PROCESSING`      | `APPROVING`                     | Application is being processed by Skip Pay                                                   |
| `READY`           | `READY`, `CANCELLED`, `EXPIRED` | Application was approved and is ready for financing                                          |
| `REJECTED`        | `CANCELLED`                     | Application was rejected by Skip Pay system                                                  |
| `CANCELLED`       | `CANCELLED`                     | Application was cancelled by client or by Skip Pay, either before approval or after delivery |

Simplified diagram of possible transitions between states:

[![States diagram of Application](https://github.com/mall-pay/payments-API/raw/master/images/StatesDiagram.png)](https://github.com/mall-pay/payments-API/raw/master/images/StatesDiagram.png)

Merchant can obtain current application state anytime with [Get application detail](#reference/application-operations/application-detail/get-application-detail) operation.
Skip Pay proactively notify merchant about important state and substate changes - merchant is able to handle [Application notification](#reference/merchantsite-operations/application-notification/application-notification).

## Conventions

### Naming conventions
- we use `camelCase` for all object and attribute names
- we use `CAPITAL_UNDERSCORE` for enum values
- we use plural in resource names

### Paging
- some resources (stated in documentation) that return collection of objects support pagination. We are using technique known as 'cursor-based pagination'.
- on request:
  - query parameter `limit` specifies maximum number of objects in returned collection
  - query parameter `after` specifies last object retrieved in previous request. Its value is usually `id` of last object retrieved in previous call, but this will be stated in documentation. Parameter `after` is used when traversing collection forwards.
  - query parameter `before` specifies first object retrieved in previous request (analogy to `after` parameter), and is used when traversing collection backwards.
  - if `before` and `after` are omitted, beginning of collection is returned, using specified sort order
  - items in collection are always sorted accoridng to attribute which could be passed in after/before parameters. Even if you specify different sorting order, this attribute will be last sorting criterion; if you do not specify sorting order, result collection will be sorted according to this attribute.
- on response:
  - `pagingInfo` object is returned as part of response body with following attributes:
    - `nextPage` - request to retrieve next page. Either `nextPage` or `previousPage` is returned, depending whether you specify `after` or `before` parameter. If you specify neither `before` nor `after` parameter, these attributes will be omitted from response.
    - `prevPage` - request to retrieve previous page (see `nextPage` attribute description above).
    - `itemsPerPage` - number of items per page


Example request:
```
curl -X GET https://api.partner.mallpay.cz/financing/v1/examples?sort=category&limit=10&after=15
```

Example response pagingInfo:

```javascript
"pagingInfo": {
    "nextPage": "/examples?sort=category&limit=10&after=15"
    "itemsPerPage": 10,
}
```

### Sorting
- some resources (stated in documentation) supports result sorting. You can specify sorting attributes and order using `sort` request parameter. For ascending order, specify just attribute name; for descending order, add unary - in front of attribute name. You can specify multiple attributes for sorting, separated by comma.
- each resource that supports sorting specifies list of attributes that can be used for sorting.

Examples:
- `/public/fxrates?sort=currencyCode` - get list of FX rates sorted by attribute currencyCode
- `/public/branches?sort=-name` - get list of branches, sorted by attribute name in descending order
- `/banking/accounts?sort=accountType,-accountCurrency,accountName` - get list of accounts, sorted by type (ascending), then by currency descending and then by account name (ascending)


### Filtering
Some resources (stated in documentation) supports results filtering. Such resources have list of filters specified together with possible operations and possible values.

You can specify filtering by passing `filter` attribute. General pattern to specify filter is:

`<filterName>|<operator>|<values>`

- `filterName` - filter name from documentation
- `operator` - operator, specified in resource documentation
- `values` - one or more values for filter. Multiple values are separated by comma

Multiple filters can be specified on each request, separated by semi-colon. They are joined by "AND", so each result item must satisfy all conditions.


#### Filtering examples
- get a list of partners with category in (1, 5, 10)
```
GET /general/partners?filter=category|in|1,5,10
```

- get a list of contracts with contractDate in (2016-02-10, 2016-04-28>
```
GET /general/contracts?filter=contractDate|gt|2016-02-10;contractDate|lteq|2016-04-28
```


#### List of operators
| Operator | Meaning                |
| ---      | ---                    |
| `lt`     | less than              |
| `lteq`   | less than or equals    |
| `eq`     | equals                 |
| `gteq`   | greater than or equals |
| `gt`     | greater than           |
| `in`     | value in list          |


### Request restrictions
Please, keep in mind following restrictions regarding requests:
- Maximum request size is **10 MB**.
- Maximum size of accepted single file is **500 kB**.
- Here is the list of suppported files:

| MIME type                                                                   | Example(s)                   |
| ---                                                                         | ---                          |
| `application/pdf`                                                           | `*.pdf`                      |
| `application/vnd.openxmlformats-officedocument.spreadsheetml.sheet`         | `*.xlsx`                     |
| `application/vnd.openxmlformats-officedocument.wordprocessingml.document`   | `*.docx`                     |
| `application/vnd.openxmlformats-officedocument.presentationml.presentation` | `*.pptx`                     |
| `application/vnd.ms-excel`                                                  | `*.xls, *.xlt, *.xla`        |
| `application/msword`                                                        | `*.doc, *.dot`               |
| `application/vnd.ms-powerpoint`                                             | `*.ppt, *.pot, *.pps, *.ppa` |
| `plain/text`                                                                | `*.csv, *.txt`               |
| `image/jpeg`                                                                | `*.jpg, *.jpeg`              |
| `image/png`                                                                 | `*.png`                      |
| `image/gif`                                                                 | `*.gif`                      |


### API calls limits
When you reach API calls limit (you call our API more times than is your quota), you receive HTTP error 429. To inform you about limits we use following response headers:
- `X-Rate-Limit-Limit` - The number of allowed requests in the current period
- `X-Rate-Limit-Remaining` - The number of remaining requests in the current period
- `X-Rate-Limit-Reset` - The number of seconds left in the current period


### Response encoding
Unless stated otherwise, all responses are sent as `Content-Type: application/json; charset=utf-8`


### HTTP status codes
We use following status codes throughout the API, except for OAuth flow when response codes are prescribed in RFC
- 200 `OK` - request was successful
- 201 `Created` - request was successfull and resource was created
- 204 `No Content` - we accepted your request but there is nothing to return (e.g. response is empty)
- 400 `Bad Request` - syntax error, e.g. request is missing required parameters/attributes or parameter values are of incorrect type
- 401 `Unauthorized` - your API key is wrong or user not authorized (not logged in)
- 403 `Forbidden` - access denied (e.g. user / application is not allowed to use the resource)
- 404 `Not Found` - resource could not be found
- 405 `Method Not Allowed` - specified method is not allowed for resource
- 422 `Unprocessable Entity` -  business (semantic) errors. Request is well-formed, but cannot be processed (e.g. payment due date is in past). Errors are specified in response body (see below)
- 429 `Too Many Requests` - you exceeded the rate limit (see section [API calls limit](#introduction/api-calls-limits) above)
- 500 `Internal Server Error` - something went wrong on our side
- 503 `Service Unavailable` - there is planned service outage


### Error handling
Besides HTTP status codes, which are the main indication if something goes wrong, we also use `errors` object to report more details about errors.

Errors object example:
```javascript
{
    ...

    errors: [
        {
            "code": "ERR_100",
            "message": "Invalid contract number",
            "severity": "ERROR",
            "attribute": "partyAccount.accountNumber",          // optional
            "ticketId": "UAT1:AMS:20160516-091658.450:45e4" // optional
        },
        {
            "code": 352,
            "message": "Insufficiend funds for payment order realization",
            "severity": "WARN"
        },
        {
            "code": 523,
            "message": "This order will trigger currency exchange operation",
            "severity": "INFO"
        }
    ]
}
```

Error object attributes
| Attribute name   | Description                                                     |
| ---              | ---                                                             |
| `code`           | unique error code                                               |
| `message`        | human readable error description (non-localized)                |
| `severity`       | error severity ([see below](#error-severity))                   |
| `attribute`      | json path of request attribute that caused the error (optional) |
| `ticketId`       | internal ticket ID, used for error backtracking                 |

<a name="error-severity"></a>
There are 3 levels of error severity:
- `ERROR` - critical error, execution cannot continue. This MUST be indicated also by appropriate HTTP status code (`422 Unprocessable Entity`)
- `WARN` - non-critical error, execution can continue but further user interaction is advisable (for request to proceed, you MUST specify this error code in `override` request attribute). This MIGHT be indicated also by appropriate HTTP status code.
- `INFO` - information only, execution can continue without user interaction.

#### Errors overview
| Status code | Code                    | Explanation                                                                     | Message                                                                                                        |
| ---         | ---                     | ---                                                                             | ---                                                                                                            |
| 400         | `INVALID_REQUEST`       | Request was not well formatted (malformed request syntax, size too large, etc.) | (*Various messages possible*) e.g. Unsupported combination of application state and order state                |
| 404         | `OBJECT_NOT_FOUND`      | The requested resource could not be found                                       | (*Various messages possible*) e.g. Specified object was not found                                              |
| 500         | `INTERNAL_SERVER_ERROR` | Unexpected condition was encountered and no more specific message is suitable.  | (*Various messages possible*) e.g. Failed to parse given JSON                                                  |


### Formats
- **date** and **time** uses [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatting, e.g.:
  - date is represented as `YYYY-mm-dd`. Timezone (local) is added when necessary.
    - time is represented as `Thh:mm:ss`. Timezone is added when necessary. Time with arbitrary number of digits respresenting miliseconds is also accepted (when [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format criteria is met) but the time without miliseconds is always returned.
  - day of week is represented as number 1..7, with 1 being Monday
  - week no. 1 is the week with the year's first Thursday in it
- **phone numbers** uses international format starting with '+' and including country code (example of valid number: `+420739111222`)
- **numbers format** number format is defined by [JSON standard](http://www.json.org), e.g. decimals are separated by `.`
- **money format** uses [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) formatting (in minor units, e.g.: 12590 represents 125,90 CZK)


### Documentation principles
- attributes in request/response object are optional, unless stated otherwise (`required` flag under attribute name)
- required attribute in optional object means, that if optional object is specified, it must contain required attribute.
- all values in request/response attributes are just examples, except for enum values - these are the only possible values for given attribute.


# Group Security
To access our API, you have to obtain *access token* first; this token is a string of arbitrary length (30+ chars) and it has to be included in HTTP header to every request to API. This section describes way to obtain valid access token and use it to access protected resources.

- to obtain access token, use `/authentication/v1/partner` resource with appropriate parameters (see the [`/authentication/v1/partner` resource documentation](#reference/security/login-partner))

- access token should be present in every request using request header `Authorization`, with type `Bearer`. If your access token has value `secret_token`, it should be specified as follows:

`Authorization: Bearer secret_token`

So the real example using curl will look like:

```
curl -H "Authorization: Bearer secret_token" https://api.partner.mallpay.cz/financing/v1/applications
```

- access token has limited time validity (for 2 hours). After it is expired, you have to obtain new one using `/authentication/v1/partner` resource.

- if you fail to specify access token, you will receive `401 Unauthorized` error and following response body:

```
{
   "error_description": "The access token is missing",
   "error": "invalid_request"
}
```

- if you provide invalid access token, you will receive `401 Unauthorized` error and following response body:

```
{
    "error_description":"The access token is invalid or has expired",
    "error":"invalid_token"
}
```

> IMPORTANT NOTE: You must keep your access token and login credentials safe. NEVER put login credentials nor access token into client page. If you plan to integrate API calls in client flow without submitting the page to server, you should implement REST endpoint bound to your shopping basket session, that will be used as a proxy to call Skip Pay API.

> NEVER transfer access token nor login credentials over plain HTTP. Such requests will be refused.


## Login partner [/authentication/v1/partner]

### Login partner [POST]
Partner authenticate himself and obtain acces token

+ Request (application/json; charset=utf-8)
    + Attributes (PartnerLogin)


+ Response 200(application/json; charset=utf-8)

        Partner acces token issued

    + Attributes (PartnerLoginResult)


+ Response 400(application/json; charset=utf-8)

        Unable to authenticate partner

    + Attributes (ErrorsResponse)


# Group Application operations
Services that allows processing of *application* and *order* during their whole lifecycle.

## Create application [/financing/v1/applications]
Elementary flow starts when customer wants to use one of Skip Pay's payment method for financing his purchase made in partner e-shop.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

Use `/financing/v1/applications` resource with properly filled request that contains at least following data
- Customer information
  - Name (first name and last name - if possible, otherwise full name)
  - E-mail
  - Phone number
- Order details
  - Number
  - Total Price (including VAT)
  - Total VAT (array of total amounts split by VAT rates)
  - Order items (array, at least one item is required)
    - Code
    - Order item name
    - Total price (all pieces, including VAT)
    - Total VAT
- Additional information necessary for the continuation and completion of the process
  - Your URL where the customer should be redirected after application approval
  - Your URL where the customer should be redirected after application rejection
  - URL of your notification endpoint you want us to send you notifications about particular application updates
  
For best customer experience request should contain following data:
- Customer information
  - Extra data
    - Historical count of customer's transactions made in partner's e-shop
- Order details
  - Delivery carrier information
  - Address (type BILLING)
    - Country
    - City
    - Street
    - Street number
    - ZIP
    - Address type
  - Order items
    - Image
- Personal data processing and terms and conditions agreement 

If the request was successfully processed, you receive HTTP status code 201 and *application* object with following important information in the response:
- Application unique ID
- Application state
- Application substate
- Gateway redirect URL where you should redirect a customer after processing of the response
- Recurrence ID if you sent `isRecurring=true` in request (for recurring orders)

If the request was recognized as duplication, you receive HTTP status code 200 and the *application* object created during the first related successful request.

__Note__: If the optional *agreementTermsAndConditions* field was not sent with the request (or it was sent with a value of `false`), the *application* will be created with *agreementTermsAndConditions* value set to `false`, *state* `PROCESSING` and *stateReason* `PROCESSING_REDIRECT_NEEDED`.

In other cases, you may receive errors similar to the following ones:
| Status code | Code                    | Explanation                                                                      |
| ---         | ---                     | ---                                                                              |
| 400         | `INVALID_REQUEST`       | Request was not well formatted (malformed request syntax, size too large, etc.)  |
| 422         | `UNPROCESSABLE`         | Request was well-formed but was unable to be followed due to semantic errors     |


### Create application [POST]
Create new *application* of particular financing type

+ Request (application/json; charset=utf-8)
    + Attributes (ApplicationRequest)


+ Response 201 (application/json; charset=utf-8)

        Application was created

    + Attributes (ApplicationResponse)


+ Response 200 (application/json; charset=utf-8)

        Application data is duplicate. Existing application is returned.

    + Attributes (ApplicationResponse)


+ Response 400 (application/json; charset=utf-8)

        There was an error processing request

    + Attributes (ErrorsResponse)


## Application detail [/financing/v1/applications/{applicationId}]
If you need to find out current information about particular *application* - primarily its state and other details - use `/financing/v1/applications/{applicationId}` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

If the request was successfully processed, you receive HTTP status code 200 and *application* object.

In other cases, you may receive errors similar to the following ones:
| Status code | Code                    | Message                                                                          |
| ---         | ---                     | ---                                                                              |
| 400         | `INVALID_REQUEST`       | Request was not well formatted (malformed request syntax, size too large, etc.)  |
| 404         | `APPLICATION_NOT_FOUND` | The requested resource could not be found                                        |
| 422         | `UNPROCESSABLE`         | The request was well-formed but was unable to be followed due to semantic errors |

+ Parameters
    + applicationId (string, required, `11200a0ee1`)


### Get application detail [GET]
Get specific *application* detail by ID

+ Response 200(application/json; charset=utf-8)

        Actual application data

    + Attributes (ApplicationResponse)


+ Response 404(application/json; charset=utf-8)

        Application does not exist

    + Attributes (ErrorsResponse)

## Create application from recurrence [/financing/v1/recurrences/{recurrenceId}/applications]

It allows to create application without customer authorization at Skip Pay gate. It needs the recurrence ID to be received previously. This endpoint doesn't need any data about customer.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | NO        |

+ Parameters
    + recurrenceId (string, required) - Recurrence ID from first application

### Create application from recurrence [POST]

+ Request (application/json; charset=utf-8)
    + Attributes (ApplicationWithoutCustomerRequest)

+ Response 201 (application/json; charset=utf-8)
    Application was created
    + Attributes (ApplicationResponse)

+ Response 400 (application/json; charset=utf-8)
    There was an error processing request
    + Attributes (ErrorsResponse)

+ Response 404 (application/json; charset=utf-8)
    There is no recurrence
    + Attributes (ErrorsResponse)

+ Response 422 (application/json; charset=utf-8)
    Recurrence could not be used or invalid input data
    + Attributes (ErrorsResponse)

## Recurrence detail [/financing/v1/recurrences/{recurrenceId}]

It allows to get recurrence detail. You can check if customer authorized your request and if recurrence is ready to be used.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | NO        |

+ Parameters
    + recurrenceId (string, required)

### Get recurrence [GET]

+ Response 200 (application/json; charset=utf-8)
    Actual recurrence data
    + Attributes (RecurrenceObject)

+ Response 404 (application/json; charset=utf-8)
    There is no recurrence
    + Attributes (ErrorsResponse)

### Update recurrence [PATCH]
At this moment it allows to change the recurrence state only. It's not neccessary but if you want to be sure that nobody can use the recurrence in the future you can cancel it.

+ Request (application/json; charset=utf-8)
    + Attributes (RecurrenceUpdateRequest)

+ Response 200(application/json; charset=utf-8)
    Recurrence was updated
    + Attributes (RecurrenceObject)

+ Response 404 (application/json; charset=utf-8)
    There is no recurrence
    + Attributes (ErrorsResponse)

+ Response 422(application/json; charset=utf-8)
    Recurrence can not be updated
    + Attributes (ErrorsResponse)

## Cancel application [/financing/v1/applications/{applicationId}/cancel]
If there is need to completely cancel customer's *order*, it is necessary to cancel respective *application*. For this purpose use `/financing/v1/applications/{applicationId}/cancel` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

| Application state | Availability                                                                                                                                                  |
| ---               | ---                                                                                                                                                           |
| `REJECTED`        | NO                                                                                                                                                            |
| `CANCELLED`       | NO                                                                                                                                                            |
| `PROCESSING`      | YES                                                                                                                                                           |
| `READY`           | YES *(available only when the Application's order is not marked as sent (via *Mark order items as sent*) or delivered (via *Mark order items as delivered*))  |

If the request was successfully processed, you receive HTTP status code 200 and object of information about cancelled *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                                  | Explanation                                                                                           |
| ---         | ---                                   | ---                                                                                                   |
| 400         | `INVALID_REQUEST`                     | Request was not well formatted (malformed request syntax, size too large, etc.)                       |
| 404         | `OBJECT_NOT_FOUND`                    | The requested resource could not be found                                                             |
| 422         | `UNPROCESSABLE`                       | The request was well-formed but was unable to be followed due to semantic errors                      |
| 422         | `APPLICATION_REJECTED`                | When you try to cancel `Application` already `REJECTED`, which is not allowed                         |
| 422         | `APPLICATION_ALREADY_CANCELLED`       | When you try to cancel `Application` that has been cancelled already                                  |
| 422         | `APPLICATION_VALIDATION_IN_PROGRESS`  | When you try to cancel `Application` which undergoes validation                                       |
| 422         | `APPLICATION_PAID`                    | When you try to cancel `Application` already paid, which is not allowed                               |
| 422         | `NOT_SUPPORTED`                       | The request was well-formed but server was not able to change application state due internal rules    |


+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Cancel application [PUT]
Cancel *application*.

+ Request (application/json; charset=utf-8)
    + Attributes (ApplicationCancelRequest)

+ Response 200(application/json; charset=utf-8)

        Application was cancelled

    + Attributes (ApplicationResponse)


+ Response 422(application/json; charset=utf-8)
    Application can not be cancelled

    + Attributes (ErrorsResponse)


## Change application order [/financing/v1/applications/{applicationId}/order]
When there's some changes within *order* before delivery (e.g. change in order items that impacts the total price of the *order*, or other billing information), use `/financing/v1/applications/{applicationId}/order` resource in order we can adjust everything properly. `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

| Application state | Availability |
| ---               | ---          |
| `REJECTED`        | NO           |
| `CANCELLED`       | NO           |
| `PROCESSING`      | YES          |
| `READY`           | YES *        |

> \* Order items can't be changed when some of them are marked as sent (via Mark order items as sent) or delivered (via Mark order items as delivered)

Use `/financing/v1/applications/{applicationId}/order` resource with properly filled request that contains (only) changed data (resource allows partial put).

If the request was successfully processed, you receive HTTP status code 200 and object of information about changed *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                    | Explanation                                                                     |
| ---         | ---                     | ---                                                                             |
| 400         | `INVALID_REQUEST`       | Request was not well formatted (malformed request syntax, size too large, etc.) |
| 404         | `OBJECT_NOT_FOUND`      | The requested resource could not be found                                       |
| 422         | `NOT_SUPPORTED`         | Resource is not supported for given financing type                              |


+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Change application order [PUT]
Change *order*. Used to change order items, total amount, billing details etc.

+ Request (application/json; charset=utf-8)
    + Attributes (ApplicationOrderChangeRequest)


+ Response 200(application/json; charset=utf-8)
        Order was changed

    + Attributes (OrderExtendedResponse)


+ Response 422(application/json; charset=utf-8)
    Order can not be changed.

    + Attributes (ErrorsResponse)


## Mark order items as cancelled  [/financing/v1/applications/{applicationId}/order/cancel]
When some or all order items were cancelled (won't be ever delivered), use `/financing/v1/applications/{applicationId}/order/cancel` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

If you want to cancel some items after marking those items as sent or delivered, use [Mark order items as returned](#reference/application-operations/mark-order-items-as-returned) operation.

| Application state | Availability |
| ---               | ---          |
| `PROCESSING`      | NO           |
| `REJECTED`        | NO           |
| `CANCELLED`       | NO           |
| `READY`           | YES          |

Use `/financing/v1/applications/{applicationId}/order/cancel` resource with an empty request to cancel all order items (the whole *order*) at once.

If you want to cancel specific order item/s, use `/financing/v1/applications/{applicationId}/order/cancel` resource with properly filled request that contains cancelled order items info. In this case request should contain array of cancelled order items with one or more particular order item identificators (`code`/`EAN`/`name`/`type`) - `code`, `ean`, `name` and `type` is used for identifying order item sent in `Create application`.

> TIP: Use an empty request if marking last (those not yet not marked) item(s) on order as cancelled.

> **ATTENTION:** If multiple properties (`code`, `ean`, `name` or `type`) are used for identifying some order item, it all must exact match the item data.

If the request was successfully processed, you receive HTTP status code 200 and object of information about changed *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                    | Explanation                                                                      |
| ---         | ---                     | ---                                                                              |
| 400         | `INVALID_REQUEST`       | Request was not well formatted (malformed request syntax, size too large, etc.)  |
| 404         | `OBJECT_NOT_FOUND`      | The requested resource could not be found                                        |
| 422         | `NOT_SUPPORTED`         | Resource is not supported for given financing type                               |

+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Mark order items as cancelled [PUT]
Mark order items as cancelled

System notification. Some or all of the order items were cancelled. Based on *application* financing type and partner setting, credit note may be issued.


+ Request (application/json; charset=utf-8)
    + Attributes (OrderItemsCancelRequest)


+ Response 200(application/json; charset=utf-8)
        Some order items or the whole order was cancelled


    + Attributes (OrderExtendedResponse)


+ Response 422(application/json; charset=utf-8)

        Order items can not be canceled.

    + Attributes (ErrorsResponse)


## Mark order items as sent [/financing/v1/applications/{applicationId}/order/send]
When some or all order items were shipped to the customer, use `/financing/v1/applications/{applicationId}/order/send` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

| Application state | Availability|
| ---               | ---         |
| `PROCESSING`      | NO          |
| `REJECTED`        | NO          |
| `CANCELLED`       | NO          |
| `READY`           | YES         |

Use `/financing/v1/applications/{applicationId}/order/send` resource with an empty request to mark all order items (the whole *order*) as sent at once.

If you want to mark specific order item/s as sent, use `/financing/v1/applications/{applicationId}/order/send` resource with properly filled request that contains sent order items info. In this case request should contain array of sent order items with one or more particular order item identificators (`code`/`EAN`/`name`/`type`) - `code`, `ean`, `name` and `type` is used for identifying order item sent in `Create application`.

> TIP: Use an empty request if marking last (those not yet not marked) item(s) on order as sent.

> **ATTENTION:** If multiple properties (`code`, `ean`, `name` or `type`) are used for identifying some order item, it all must exact match the item data.

If the request was successfully processed, you receive HTTP status code 200 and object of information about changed *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                            | Explanation                                                                       |
| ---         | ---                             | ---                                                                               |
| 400         | `INVALID_REQUEST`               | Request was not well formatted (malformed request syntax, size too large, etc.)   |
| 404         | `OBJECT_NOT_FOUND`              | The requested resource could not be found                                         |
| 422         | `TOTAL_PRICE_LIMIT_EXCEEDED`    | The total price of all subcontracts exceeded the order total price                |
| 422         | `NOT_SUPPORTED`                 | Resource is not supported for given financing type                                |

+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Mark order items as sent [PUT]
Mark order items as sent

System notification. Some or all order items were shipped to customer.
Based on *application* financing type and partner setting, application payment may be processed.

+ Request (application/json; charset=utf-8)
    + Attributes (OrderItemsSendRequest)


+ Response 200(application/json; charset=utf-8)
        Order items or whole order is marked as shipped

    + Attributes (OrderExtendedResponse)


+ Response 422(application/json; charset=utf-8)
        State change can not be processed

    + Attributes (ErrorsResponse)


## Mark order items as delivered [/financing/v1/applications/{applicationId}/order/deliver]
When some or all order items were delivered to the customer, use `/financing/v1/applications/{applicationId}/order/deliver` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

| Application state | Availability |
| ---               | ---          |
| `PROCESSING`      | NO           |
| `REJECTED`        | NO           |
| `CANCELLED`       | NO           |
| `READY`           | YES          |

Use `/financing/v1/applications/{applicationId}/order/deliver` resource with an empty request to mark all order items (the whole *order*) as delivered at once.

If you want to mark specific order item/s as delivered, use `/financing/v1/applications/{applicationId}/order/deliver` resource with properly filled request that contains delivered order items info. In this case request should contain array of delivered order items with one or more particular order item identificators (`code`/`EAN`/`name`/`type`) - `code`, `ean`, `name` and `type` is used for identifying order item sent in `Create application`.

> TIP: Use an empty request if marking last (those not yet not marked) item(s) on order as delivered.

> **ATTENTION:** If multiple properties (`code`, `ean`, `name` or `type`) are used for identifying some order item, it all must exact match the item data.

If the request was successfully processed, you receive HTTP status code 200 and object of information about changed *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                              | Explanation                                                                       |
| ---         | ---                               | ---                                                                               |
| 400         | `INVALID_REQUEST`                 | Request was not well formatted (malformed request syntax, size too large, etc.)   |
| 404         | `OBJECT_NOT_FOUND`                | The requested resource could not be found                                         |
| 422         | `TOTAL_PRICE_LIMIT_EXCEEDED`      | The total price of all subcontracts exceeded the order total price                |
| 422         | `NOT_SUPPORTED`                   | Resource is not supported for given financing type                                |

+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Mark order items as delivered [PUT]
Mark order items as delivered.

System notification. Some or all order items were delivered to customer.
Based on *application* financing type and partner setting, application payment may be processed.


+ Request (application/json; charset=utf-8)
    + Attributes (OrderItemsDeliverRequest)


+ Response 200(application/json; charset=utf-8)
        Order items or whole order is marked as delivered

    + Attributes (OrderExtendedResponse)


+ Response 422(application/json; charset=utf-8)
        State change can not be processed

    + Attributes (ErrorsResponse)


## Mark order items as returned [/financing/v1/applications/{applicationId}/order/return]
When some or all order items were returned by the customer to you (after delivery), use `/financing/v1/applications/{applicationId}/order/return` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

If you want to cancel some items before marking those items as sent or delivered, use [Mark order items as cancelled](#reference/application-operations/mark-order-items-as-cancelled) operation.

| Application state | Availability |
| ---               | ---          |
| `PROCESSING`      | NO           |
| `REJECTED`        | NO           |
| `CANCELLED`       | NO           |
| `READY`           | YES          |

Use `/financing/v1/applications/{applicationId}/order/return` resource with an empty request to mark all order items (the whole *order*) as returned at once.

If you want to mark specific order item/s as returned, use `/financing/v1/applications/{applicationId}/order/return` resource with properly filled request that contains returned order items info. In this case request should contain array of returned order items with one or more particular order item identificators (`code`/`EAN`/`name`/`type`) - `code`, `ean`, `name` and `type` is used for identifying order item sent in `Create application`.

> TIP: Use an empty request if marking last (those not yet not marked) item(s) on order as returned.

> **ATTENTION:** If multiple properties (`code`, `ean`, `name` or `type`) are used for identifying some order item, it all must exact match the item data.

If the request was successfully processed, you receive HTTP status code 200 and object of information about changed *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                    | Explanation                                                                      |
| ---         | ---                     | ---                                                                              |
| 400         | `INVALID_REQUEST`       | Request was not well formatted (malformed request syntax, size too large, etc.)  |
| 404         | `OBJECT_NOT_FOUND`      | The requested resource could not be found                                        |
| 422         | `NOT_SUPPORTED`         | Resource is not supported for given financing type                               |

+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Mark order items as returned [PUT]
Mark order items as returned.

System notification. Some or all order items were returned by customer back to e-shop.
Based on *application* financing type and partner setting, credit note may be issued.


+ Request (application/json; charset=utf-8)
    + Attributes (OrderItemsReturnRequest)


+ Response 200(application/json; charset=utf-8)
        Order items or whole order is marked as returned

    + Attributes (OrderExtendedResponse)


+ Response 422(application/json; charset=utf-8)
        State change can not be processed

    + Attributes (ErrorsResponse)


## Applications payments  [/financing/v1/applications/{applicationId}/payments]

+ Parameters
    + applicationId (string, required, `11b00a1ef1`)


### Get payments on specific application [GET]
Get payments on specific *application*

List of realized payments from Skip Pay to partner. In case of multiple invoices, list may contain more items.

feature | supported by resource
--- | ---
[paging](#header-paging) | yes
[sorting](#header-sorting) | no
[filtering](#header-filtering) | no

This resource supports [paging](#header-paging). As a value to `before` and `after` parameters, use `paymentId` attribute.

Collection is sorted by paymentId attribute.

+ Response 200(application/json; charset=utf-8)
        List of payments. May be empty if no payment was processed yet.

    + Attributes (object)
        + data (array[Payment], fixed-type, required)
        + pagingInfo (PagingInfo, optional)


+ Response 404(application/json; charset=utf-8)

        Application does not exist

    + Attributes (ErrorsResponse)


## Orders [/financing/v1/orders{?orderNumber,orderVariableSymbol,applicationId}]
If you need to find out current information about particular *order* - primarily its state (or its order items' states) and other details - use `/financing/v1/orders{?orderNumber,orderVariableSymbol,applicationId}` resource where `{applicationId}` is the application ID you received in the response of `/financing/v1/applications` after its creation, `{orderNumber}` is your order's number and `{orderVariableSymbol}` is your order's variable symbol.

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

| Application state | Availability |
| ---               | ---          |
| `PROCESSING`      | YES          |
| `REJECTED`        | YES          |
| `CANCELLED`       | YES          |
| `READY`           | YES          |


If the request was successfully processed, you receive HTTP status code 200 and object of information about specified *order* plus basic information about respective *application* (ID, state, substate).

In other cases, you may receive errors similar to the following ones:
| Status code | Code                    | Explanation                                                                      |
| ---         | ---                     | ---                                                                              |
| 404         | `OBJECT_NOT_FOUND`      | The requested resource could not be found                                        |
| 422         | `UNPROCESSABLE`         | The request was well-formed but was unable to be followed due to semantic errors |


### Get order [GET]
Search for *order* using specified parameters.

use `/financing/v1/orders` with at least one of following parameter:
- variable symbol,
- order number,
- application number.

<a name="orders-parameters-restriction"></a>

+ Parameters
    + orderNumber (string, optional, `1234567890`) - Order number
    + orderVariableSymbol (string, optional, `1234567890`) - Order variable symbol
    + applicationId (string, optional, `11b00a1ef1`) - Application ID

+ Response 200(application/json; charset=utf-8)

        Order data

    + Attributes (OrderExtendedResponse)


+ Response 404(application/json; charset=utf-8)

        Order not found

    + Attributes (ErrorsResponse)

# Group Precheck operations
Services that allow partner e-shops find out a probability of *application's* approval and limits of particular customer, if known to Skip Pay

## Precheck [/financing/v1/precheck]
Precheck *application*

Returns probability of *application's* approval and limits of particular customer, if known to Skip Pay

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

It has to be called with valid access token (see the [Security section](#reference/security)) from your server. If you plan to integrate it in client flow, you should implement REST endpoint bound to your shopping basket session, that will be used as a proxy to call Skip Pay API - **NEVER put access token directly to client side**.

Possible error codes explanation:
| Status code | Code                  | Explanation                                                                     |
| ---         | ---                   | ---                                                                             |
| 400         | `INVALID_REQUEST`     | Request was not well formatted (malformed request syntax, size too large, etc.) |
| 422         | `PERSONAL_ID_INVALID` | PersonalId is not valid                                                         |

### Precheck [POST]
Returns probability of *application's* approval and limits of particular customer, if known to Skip Pay

+ Request (application/json; charset=utf-8)
    + Attributes (PrecheckRequest)

+ Response 200 (application/json; charset=utf-8)

        Probability of approval

    + Attributes (PrecheckResultsResponse)


+ Request minimal case 1 (application/json; charset=utf-8)
    + Body
    ```
        {
            "customer": {
                "firstName": "John",
                "lastName": "Newborn",
                "email": "john.newborn@country.com",
                "phone": "+420123456789"
            }
        }
    ```

+ Response 200 (application/json; charset=utf-8)

        Probability of approval

    + Attributes (PrecheckResultsResponse)


+ Request minimal case 2 (application/json; charset=utf-8)
    + Body
    ```
        {
            "customer": {
                "fullName": "John Newborn",
                "email": "john.newborn@country.com",
                "phone": "+420123456789"
            }
        }
    ```

+ Response 200 (application/json; charset=utf-8)

        Probability of approval

    + Attributes (PrecheckResultsResponse)


+ Request minimal case 3 (application/json; charset=utf-8)
    + Body
    ```
        {
            "customer": {
                "fullName": "John Augustus Milverton",
                "email": "john.milverton@appleseed.example.com",
                "phone": "+420123456789"
            }
        }
    ```

+ Response 200 (application/json; charset=utf-8)

        Probability of approval

    + Attributes (PrecheckResultsResponse)


+ Request Missing some fields (application/json; charset=utf-8)
    + Attributes
        + `customer` (PrecheckCustomerRequest, required)
        + `order` (PrecheckOrderRequest)
        + `type` (enum, optional)
            + `DEFERRED_PAYMENT`
            + `PAY_IN_THREE`

+ Response 422 (application/json; charset=utf-8)
        Error in processing request
    + Attributes (ErrorsResponse)


+ Request Missing customer field (application/json; charset=utf-8)
    + Attributes
        + `order` (PrecheckOrderRequest)
        + `type` (enum, optional)
            + `DEFERRED_PAYMENT`
            + `PAY_IN_THREE`

+ Response 422 (application/json; charset=utf-8)
        Error in processing request
    + Attributes (ErrorsResponse)


+ Request (application/json; charset=utf-8)
    + Body
    ```
    {
        nonsense
    }
    ```

+ Response 400 (application/json; charset=utf-8)
        Error in processing request
    + Attributes (ErrorsResponse)


# Group Merchantsite operations
Services that should be developed and exposed by partner e-shops to allow Skip Pay asynchronously inform these partner e-shops about important changes regarding particular *applications* and *orders*

> **ATTENTION:** This set of APIs is NOT exposed from Skip Pay. Instead, it should be developed by partner and accept calls specified below.

## Application notification [/financing/v1/{application.merchantUrls.notificationEndpoint}]
We use this resource when there is need to let you know about important changes within particular *application*. Namely in following situations:

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

> IMPORTANT NOTE: This service should be developed and exposed by partner e-shops to allow Skip Pay to asynchronously inform these partners about important changes regarding particular applications.

| Trigger                                                             | Corresponding Application.stateReason | Expected reaction                                                                        |
| ---                                                                 | ---                                   | ---                                                                                      |
| Application was rejected                                            | `REJECTED`                            | You should probably cancel respective order and release reserved goods                   |
| Application was cancelled                                           | `CANCELLED_NOT_PAID`                  | You should probably cancel respective order and release reserved goods                   |
| Order to dispatch (we commit to finance customer's order)           | `READY_TO_SHIP`                       | Dispatch the order to the customer                                                       |
| Order dispatched                                                    | `READY_SHIPPED`                       | None - serves as an acknowledgment (partner should know about this change)               |
| Order delivered                                                     | `READY_DELIVERED`                     | None - serves as an acknowledgment (partner should know about this change)               |
| Application was paid to the partner                                 | `READY_PAID`                          | Financial compensation for the application has been processed - check your bank account  |

> NOTE: READY_PAID state is set when at least part of the application price was paid to the partner, not necessarily full application price. This also applies to the `Application was paid to the partner` application notification trigger.

We fill the request with following information:
- Application unique ID
- Application state
- Application substate

> IMPORTANT: You should always double check the state of Application on `/financing/v1/applications/{applicationId}` resource due to security reasons.

If notification is not processed due to error or unavailability it is automatically sent again (retried) after 1, 5, 5, 5 a 5 minutes by default (5 tries in total). 

### Application notification [POST]
Notify partner about changes in application.

+ Request (application/json; charset=utf-8)
    + Attributes (ApplicationBaseResponse)


+ Response 200 (application/json; charset=utf-8)

         {
            "status": "OK"
         }

+ Response 400 (application/json; charset=utf-8)

        Can not process changes

## Payment notification [/financing/v1/{application.merchantUrls.paymentEndpoint}]

| Financing type     | Supported |
| ---                | ---       |
| `DEFERRED_PAYMENT` | YES       |
| `PAY_IN_THREE`     | YES       |

### Payment notification [POST]
Notification about new payment.

+ Request (application/json; charset=utf-8)
    + Attributes (Payment)


+ Response 200 (application/json; charset=utf-8)

         {
            "status": "OK"
         }

+ Response 400 (application/json; charset=utf-8)

        Can not process changes


# Group Health check
To check the availability of back-end services use the [health check resource](#reference/health-check/health-check).

## API health check [/v1/health]
If the API back-end services are up and runing, you receive HTTP status code 200 with optional version info.

In other cases, you may receive errors similar to the following ones:
| Status code | Description                                             |
| ---         | ---                                                     |
| 503         | `Service Unavailable` - there is planned service outage |

> Note: resource DOES NOT require valid *access_token* in the HTTP header of the request

### API health check [GET]
Get current state of the API

+ Request (application/json; charset=utf-8)

+ Response 200 (application/json; charset=utf-8)

    + Attributes (HealthCheckResponse)

+ Response 503
    Service is not available

    + Body

# Data Structures

## PartnerLogin (object)
Partner login credentials

### Properties
+ `username`: `eShop` (string, required) - Partner username
+ `password`: `eShopSecretPassword` (string, required) - Partner secret password

## PartnerLoginResult (object)
Authenticated partner access token

### Properties
+ `accessToken`: `TokenForPartnerTokenForPartnerTokenForPartnerTokenForPartner` (string) - Access token
+ `expiresIn`: 7200 (number) - Token validity remaining time (in seconds)

## DeliveryCarrier (object)
Delivery carrier

### Properties
+ One Of
    + carrierId (enum, required)
        + CZ_POST_HAND - Czech Post, Parcel Delivery to Hand
        + CZ_POST_OFFICE - Czech Post, Parcel Delivery to Post Office
        + CZ_POST_OTHER - Czech Post, other service
        + PPL
        + DPD
        + GEIS
        + IN_TIME
        + TOP_TRANS
        + GEBRUDER_WEISS
        + LOCAL_COURIER
        + TNT
        + GLS
        + HDS_COMFORT
        + HDS_STANDARD
        + MALL_DEPOSIT - Ulozenka

    + carrierCustom: `my custom carrier` (string, required) - (max length 250) For carriers not found in enumeration of customer ID, specify value as text


## Address (object)
Address

### Properties
+ `name`: `John Doe` (string, optional) - (max length 100) Name on address
+ `country`: `CZ` (string, required)

    Country.

    (see [ISO 3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))

+ `city`: `Prague` (string, required) - (max length 100) City.
+ `streetAddress`: `Letenská` (string, required) - (max length 100) Street/city part.
+ `streetNumber`: `22` (string) - (max length 50) Street number
+ `zip`: `140 00` (string, required) - (max length 30) Postal code
+ `addressType` (enum, required) - Type of the address. Only some of the types are allowed in each context.
    + `PERMANENT` - Permanent residential address
    + `CONTACT` - Contact address
    + `DELIVERY` - Delivery address
    + `BILLING` - Billing address


## OrderAddress (Address)
Order address

### Properties
+ `addressType` (enum, required) - Type of the address. Only some of the types are allowed in each context.
    + `DELIVERY` - Delivery address
    + `BILLING` - Billing address


## Amount (object)
Financial amount

### Properties
+ `amount`: 12590 (number, required) - Amount in minor units (12590 represents 125,90 CZK) [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
+ `currency`: `CZK` (string, required) - Amount currency. [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) (only CZK value is allowed)

## VatAmount (Amount)
Financial amount with VAT rate.

### Properties
+ `vatRate`: 15 (number, required) - VAT rate as positive number (ie. 15 represents 15% rate). 0 is allowed. 

## ApplicationBaseResponse (object)
Financing application base information

### Properties
+ `id`: `11200a0ee1` (string, required) - Unique identifier in Skip Pay
+ `state` (enum, required) - Application state.
    + `PROCESSING` - Application is being processed by Skip Pay
    + `READY` - Application was approved and is ready for financing
    + `REJECTED` - Application was rejected
    + `CANCELLED` - Application was cancelled by client, either before approval or after delivery
+ `stateReason`: `PROCESSING_REDIRECT_NEEDED` (enum, required) - Describes internal state of application, e.g. when state is PROCESSING - reason why application remains in processing state
    + `PROCESSING_REDIRECT_NEEDED` - Redirect to Skip Pay is needed. Redirect user to `gatewayRedirectUrl`.
    + `PROCESSING_PREAPPROVED` - Preliminary approval by Skip Pay.
    + `PROCESSING_VALIDATION_IN_PROGRESS` - Currently being approved in Skip Pay. Check it later.
    + `REJECTED` - Rejected by Skip Pay.
    + `CANCELLED_NOT_PAID` - Cancelled before delivery.
    + `READY_TO_SHIP` - Financing approved, goods ready to be shipped to client.
    + `READY_SHIPPED` - Goods shipped to client.
    + `READY_DELIVERED` - Goods delivered to client.
    + `READY_PAID` - Paid to merchant.
    + `CANCELLED_RETURNED` - Cancelled after delivery, goods returned to merchant.


## ApplicationResponse (ApplicationBaseResponse)
Financing application

### Properties
+ `customer` (CustomerResponse, required) - Customer data
+ `order` (OrderResponse, required) - Order data
+ `type` (enum, optional) - Financing type
    + `DEFERRED_PAYMENT` - Pay later ("zaplať později")
    + `PAY_IN_THREE` - Pay in three ("třetinka")
+ `agreementTermsAndConditions`: `true` (boolean, optional) - Terms and conditions agreement
+ `gatewayRedirectUrl` (string, optional) - Gateway redirect URL. Redirect user to this URL if state is `PROCESSING` and stateReason is `PROCESSING_REDIRECT_NEEDED`.
+ `recurrence` (RecurrenceObject, optional) - Recurrence data. Recurrent payment is not allowed for `PAY_IN_THREE` type.


## ApplicationWithoutCustomerRequest (object)
Financing application request

### Properties
+ `order` (OrderRequest, required) - Order information
+ `type` (enum, optional) - Financing type
    + `DEFERRED_PAYMENT` - Pay later ("zaplať později")
    + `PAY_IN_THREE` - Pay in three ("třetinka")
+ `agreementTermsAndConditions`: `true` (boolean, optional) - Terms and conditions agreement
+ `precheckIds` (array[string], optional) - Array of all precheck ids related to this application. See [Precheck operation](#reference/precheck-operations/precheck) and it's response (PrecheckResultsResponse).
+ `merchantUrls` (MerchantUrls, required) - Collection of partner's URLs used for redirection of a customer back to a partner website or as a notification endpoint

## ApplicationRequest (ApplicationWithoutCustomerRequest)

### Properties
+ `customer` (CustomerRequest, required) - Customer information
+ `isRecurring`: `false` (boolean, optional) - Ensures recurrence ID in reponse. Default is `false`

## RecurrenceObject (object)

### Properties
+ `id`: `abcd1234` (string, required) - Unique identifier in Skip Pay
+ `state` (enum, required) - Recurrence state
    + `APPROVING` - Recurrence is waiting to be approved by customer
    + `READY` - Recurrence is ready to be used
    + `CANCELLED` - Recurrence was cancelled (by you or us) or the first order was rejected or cancelled
    + `EXPIRED` - Recurrence was not used for more than 13 months

## CustomerBase (object)
Customer data

### Properties
+ `titleBefore`: `Ing.` (string, optional) - (max length 60) Academical degree, in front of the name
+ `titleAfter`: `CSc.` (string, optional) - (max length 60) Academical degree, behind name
+ `email`: `john.newborn@country.com` (string, required) - (max length 254) E-mail address of customer
+ `addresses` (array[Address], optional) - Addresses. All types are allowed.
+ `tin`: `12333321` (string, optional) - (max length 20) Tax identification number (ICO)
+ `vatin`: `CZ8402154456` (string, optional) - (max length 20) VAT identification number
+ `extraData` (CustomerExtraData, optional) - Additional data, that may improve the approval probability.

## CustomerRequest (CustomerBase)
Customer data

### Properties
+ `firstName`: `John` (string, optional) - (max length 60) Customer first (given) name. Must be paired with `lastName`. Required if `fullName` is empty.
+ `lastName`: `Newborn` (string, optional) - (max length 60) Customer last (family) name. Must be paired with `firstName`. Required if `fullName` is empty.
+ `fullName`: `Ing. John Newborn, Csc.` (string, optional) - (max length 240) Customer full name, including academical degrees and salutation. Required only if `firstName` or `lastName` are empty.
+ `phone`: `+420123456789` (string, optional) - (max length 13) Phone number with country code (including leading `+`). Phone number is by default required if you are not able to send it contact us.

## CustomerResponse (CustomerBase)
Customer data

### Properties
+ `firstName`: `John` (string, optional) - (max length 60) Customer first (given) name. Must be paired with `lastName`. Required if `fullName` is empty.
+ `lastName`: `Newborn` (string, optional) - (max length 60) Customer last (family) name. Must be paired with `firstName`. Required if `fullName` is empty.
+ `fullName`: `Ing. John Newborn, Csc.` (string, optional) - (max length 240) Customer full name, including academical degrees and salutation. Required only if `firstName` or `lastName` are empty.
+ `phone`: `+420123456789` (string, optional) - (max length 13) Phone number with country code (including leading `+`).
+ `type` (enum, required) - Customer type.
    + `UNKNOWN` - Customer is uknown for Skip Pay.
    + `FIRST_ORDER` - Skip Pay knows the customer. Customer has no paid orders.
    + `FULL` -  Skip Pay knows the customer. Customer has at least one paid order.
    + `BLOCKED` - Skip Pay knows the customer. Customer is blocked.


## CustomerExtraData (object)

### Properties
+ `transactionsNumber`: 10 (number, optional) - (positive integer) Historical count of customer's cash transactions made in partner's e-shop
+ `cashlessTransactionsNumber`: 5 (number, optional) - (positive integer) Historical count of customer's cashless transactions made in partner's e-shop
+ `transactionsSum` (Amount, optional) - Sum of all cash transactions made in partner's e-shop
+ `cashlessTransactionsSum` (Amount, optional) - Sum of all cashless transactions made in partner's e-shop
+ `latestTransactionDate`: `2017-01-10` (string, optional) - Newest transaction date on partner e-shop.
+ `earliestTransactionDate`: `2015-10-12` (string, optional) - Oldest transaction date on partner e-shop
+ `pageTotalTime`: 250 (number, optional) - (positive integer) Total time spent on partners website (in seconds)
+ `pageReviewsTime`: 100 (number, optional) - (positive integer) Total time spent on partners website in review and comments sections (in seconds)
+ `cartItemsRemoved`: 2 (number, optional) - (positive integer) Total count of removed items form shopping basket during current shopping
+ `itemsViewed`: 10 (number, optional) - (positive integer) Number of viewed pages with products
+ `tags` (array[string], optional) - (array[max length 10]) List of custom tags (ie. information, that customer is club member, vip customer, etc.)

## ApplicationOrderChangeRequest (object)
Object used to change order information.

### Properties
+ reason (string, optional) - Reason of change.
+ order (OrderChangeRequest, required) - Changed order data.

## RecurrenceUpdateRequest (object)

### Properties
+ `state`: `CANCELLED` (enum, required) - This endpoint allows only one option
    + `CANCELLED` - Recurrence will be canceled

## ApplicationCancelRequest (object)
Specification of the reason why the application is cancelled.

### Properties
+ `reason`: `APPLICATION_CANCELLED_BY_CUSTOMER` (enum, optional) - Reason of cancellation. Considered as `APPLICATION_CANCELLED_OTHER` if not set.
    + `APPLICATION_CANCELLED_CARRIER_CHANGED` - Order carrier changed
    + `APPLICATION_CANCELLED_CART_CONTENT_CHANGED` - Cart content changed or customer returned from the cart
    + `APPLICATION_CANCELLED_BY_CUSTOMER` - Customer cancelled order (in his profile or through customer center)
    + `APPLICATION_CANCELLED_BY_ERP` - Cancelled by e-shop's back-office process (e.g. some items unavailable)
    + `APPLICATION_CANCELLED_EXPIRED` - Application expired (too long waiting time for response from Skip Pay)
    + `APPLICATION_CANCELLED_UNFINISHED` - Customer did not finish order
    + `APPLICATION_CANCELLED_BY_ESHOP_RULES` - Internal e-shop rules breached (e.g. problem with customer's additional data)
    + `APPLICATION_CANCELLED_OTHER` - Other reason - specified in `customReason`
+ `customReason` (string, optional) - Specification of `APPLICATION_CANCELLED_OTHER` reason

## OrderItemsChangeRequest (object)
Object used to change order items.

### Properties
+ `items` (array[OrderItemChangeRequest], optional) - List of changed items. All items are considered when empty.
+ `totalPrice` (Amount, optional) - Total amount of items (from orderItems array), including VAT.
+ `totalVat` (array[VatAmount], optional) - Total VAT amounts of items (from orderItems array) split by their VAT rates.

## OrderItemsReturnRequest (OrderItemsChangeRequest)
Object used to mark order items as returned.

### Properties
+ `document` (DocumentRequest, optional) - Attached document (credit note, ...)
+ `variableSymbol`: `1234567890` (string, optional) - (max length 10)  Variable symbol of the new document (credit note, ...). This symbols is used by Skip Pay to pair payment from e-shop.

## OrderItemsSendRequest (OrderItemsChangeRequest)
Object used to mark order items as sent.

### Properties
+ `document` (DocumentRequest, optional) - Attached invoice (invoice, proforma invoice...)
+ `variableSymbol`: `1234567890` (string, optional) - (max length 10)  Required if was not specified earlier in 'Create application' or 'Change application order' operations. Symbol used for making the payment to your account. This string must contain only numbers, maximum length is 10 characters (digits).
+ `specificSymbol`: `1234567890` (string, optional) - (max length 10)  Symbol used for making the payment to your account. This string must contain only numbers, maximum length is 10 characters (digits).
+ `sentDate`: `2017-01-12` (string, optional) - Shipping date
+ `deliveryCarrier` (DeliveryCarrier, optional) - Carrier
+ `deliveryTrackingNumber`: `EEX1221` (string, optional) - (max length 64) Delivery tracking number

## OrderItemsDeliverRequest (OrderItemsSendRequest)
Object used to mark order items as delivered.

### Properties
+ `deliveryDate`: `2017-01-15` (string, optional) - Delivery date

## OrderItemsCancelRequest (OrderItemsChangeRequest)
Object used to mark order items as cancelled.

## OrderBase (object)
Order information, needed to create an application.

### Properties
+ `number`: `AA234` (string, required) - (max length 100) Order number (internal for e-shop)
+ `variableSymbols` (array[string], optional) - (max length 10) Variable symbols for pairing. First symbol in array is used for making the payment to your account (if not specified later in `Mark order items as sent` or `Mark order items as delivered`) or we expect you make payment on our account with this symbol (if not specified later in `Mark order items as returned` operation). Strings must contain only numbers, maximum length is 10 characters (digits).
+ `totalPrice` (Amount, required) - Total order amount, including VAT. Needs to be positive.
+ `totalVat` (array[VatAmount], required) - Total VAT amounts split by their VAT rates.
+ `addresses` (array[OrderAddress], optional) - Addresses. Only `BILLING` and `DELIVERY` types are allowed.
+ `deliveryType` (enum, optional) - Delivery type, for `DELIVERY_CARRIER` type can be further specified by `deliveryCarrier` attribute.
    + `DELIVERY_CARRIER` - If delivered by carrier - use `deliveryCarrier` for further specification.
    + `PERSONAL_BRANCH` - Personal collection at branch
    + `PERSONAL_PARTNER` - Personal collection at partner network
    + `ONLINE` - Online delivery (e.g. for intangible assets)
+ `deliveryCarrier` (DeliveryCarrier, optional) - Delivery carrier, when applicable.
+ `reservationDate`: `2017-07-15T00:00:00+02:00` (string, optional, nullable)

   Date and time until order is reserved.

   Until 'reservationDate' Skip Pay will try to notify partner with Application notification about approval or rejection.

   After this date and time, e-shop does not guarantee items availability (if application processing is longer, it may endanger order fullfillment).

## OrderRequest (OrderBase)

### Properties
+ `documents` (array[DocumentRequest], optional) - Attached documents (invoices etc.)
+ `items` (array[OrderItemRequest], required) - Order items
+ `merchantId` (string, optional) - Merchant identification (ie. in case of multiple e-shops managed by one credentials)

## OrderResponse (OrderBase)

### Properties
+ `state` (enum, required) - Order state.
    + `PROCESSING` - Order is being processed by merchant
    + `SENT` - All order items was sent to customer
    + `DELIVERED` - All order items was delivered to customer
    + `RETURNED` - All order items was returned to merchant
    + `CANCELLED` - Order was fully cancelled
+ `deliveryDate`: `2017-01-17T00:00:00+02:00` (string, optional) - Date and time of delivery
+ `deliveryTrackingNumber`: `EX12221` (string, optional) - (max length 64) Delivery tracking number
+ `sentDate`: `2017-01-12T00:00:00+02:00` (string, optional) - Date and time of order shipping
+ `documents` (array[DocumentResponse], optional) - Attached documents (invoices etc.)
+ `items` (array[OrderItemResponse], required) - Order items
+ `merchantId` (string, required) - Merchant identification

## OrderExtendedResponse (OrderResponse)

Order with additional information about Application.

### Properties
+ `applicationInfo` (ApplicationBaseResponse, required) - Base information about respective application

## OrderChangeRequest (object)
+ `number`: `AA234` (string, optional) - Order number (internal for e-shop)
+ `variableSymbols` (array[string], optional) - Variable symbols for pairing. First symbol in array is used for making the payment to your account (if not specified later in `Mark order items as sent` or `Mark order items as delivered`) or we expect you make payment on our account with this symbol (if not specified later in `Mark order items as returned` operation). Strings must contain only numbers, maximum length is 10 characters (digits).
+ `totalPrice` (Amount, optional) - Total order amount, including VAT
+ `totalVat` (array[VatAmount], optional) - Total VAT amounts split by their VAT rates
+ `addresses` (array[Address], optional) - Addresses. Only `BILLING` and `DELIVERY` types are allowed.
+ `deliveryType` (enum, optional) - Delivery type, for `DELIVERY_CARRIER` type can be further specified by `deliveryCarrier` attribute.
    + `DELIVERY_CARRIER` - If delivered by carrier - use `deliveryCarrier` for further specification.
    + `PERSONAL_BRANCH` - Personal collection at branch
    + `PERSONAL_PARTNER` - Personal collection at partner network
    + `ONLINE` - Online delivery (e.g. for intangible assets)
+ `deliveryCarrier` (DeliveryCarrier, optional) - Delivery carrier, when applicable.
+ `reservationDate`: `2017-07-15T00:00:00+02:00` (string, optional, nullable)

   Date and time until order is reserved.

   Until 'reservationDate' Skip Pay will try to notify partner with Application notification about approval or rejection.

   After this date and time, e-shop does not guarantee items availability (if application processing is longer, it may endanger order fullfillment).

+ `items` (array[OrderItemRequest], optional) - Order items
+ `documents` (array[DocumentRequest], optional) - Attached documents (invoices etc.)

## OrderItemBase (object)
Order item base information, needed to identify order item

### Properties
+ `code`: `EXC4677-1a` (string, required) - (max length 200) Internal code for item (internal to e-shop). Used to better identify the item for future changes
+ `ean`: 888462064002 (string, optional) - (max length 64) EAN code.
+ `name`: `iPhone 6s 32GB SpaceGray` (string, required) - (max length 255) Item name
+ `type` (enum, optional) - Item type
    + `PHYSICAL`
    + `DISCOUNT`
    + `SHIPPING_FEE`
    + `SALES_TAX`
    + `DIGITAL`
    + `GIFT_CARD`
    + `STORE_CREDIT`
    + `FEE`
    + `INSURANCE`
+ `variant`: `32GB SpaceGray` (string, optional) - (max length 250) Item variant
+ `description`: `Mobile phone with 32GB of RAM` (string, optional)
+ `producer`: `Apple` (string, optional) - (max length 250)
+ `categories`: `mobile phones`,`FullHD`, `64GB` (array[string], optional) - List of item categories
+ `totalPrice` (Amount, required) - Total price for all pieces, VAT inclusive. Can be both positive (goods, ...) or negative (discount, ...) or `0`.
+ `totalVat` (VatAmount, required) - Total VAT amount for all pieces. Can be both positive (goods, ...) or negative (discount, ...) or `0` (if `vatRate` is `0`).
+ `productUrl`: `https://www.example.com?itemId=10` (string, optional) - (max length 200) URL of the item in e-shop

## OrderItemRequest (OrderItemBase)
Order item information, needed to create an application.

### Properties
+ `image` (FileRequest, optional) - Item image
+ `unitPrice` (Amount, optional) - Price per one piece, VAT inclusive. If empty, automatically considered that `unitPrice` is `totalPrice` / `quantity`. Can be both positive (goods, ...) or negative (discount, ...).
+ `unitVat` (VatAmount, optional) - VAT amount per one piece. If empty, automatically considered that `unitVat` is `totalVat` / `quantity`.
+ `quantity`: 1 (number, optional) - (positive float/decimal up to 3 decimal places) Item quantity. If empty, considered as 1.

## OrderItemResponse (OrderItemBase)
Order item information.

### Properties
+ `state` (enum, required) - Order state.
    + `PROCESSING` - Oorder item delivery is being processed by merchant
    + `SENT` - Items wa sent to customer
    + `DELIVERED` - Order item was delivered to customer
    + `RETURNED` - Order item was returned to merchant
    + `CANCELLED` - Order item was cancelled
+ `sentDate`: `2017-01-10` (string, optional) - Date when item was sent. Only when the whole order was NOT sent at once.
+ `deliveryDate`: `2017-01-12` (string, optional) - Date when item was delivered. Only when the whole order was NOT sent at once.
+ `deliveryTrackingNumber`: `EX21121` (string, optional) - (max length 64) Tracking number for the item. Only when the whole order was NOT sent at once.
+ `image` (FileResponse, optional) - Item image
+ `unitPrice` (Amount, required) - Price per one piece, VAT inclusive. If empty, automatically considered that `unitPrice` is `totalPrice` / `quantity`. Can be both positive (goods, ...) or negative (discount, ...).
+ `unitVat` (VatAmount, required) - VAT amount per one piece. If empty, automatically considered that `unitVat` is `totalVat` / `quantity`.
+ `quantity`: 1 (number, required) - (positive float/decimal up to 3 decimal places) Item quantity.

## OrderItemChangeRequest (object)
Order item base information

### Properties
+ `code`: `EXC4677-1a` (string, optional) - (max length 200) Internal code for item (internal to e-shop). Used to better identify the item for future changes
+ `ean`: 888462064002 (string, optional) - (max length 64) EAN code.
+ `name`: `iPhone 6s 32GB SpaceGray` (string, optional) - (max length 255) Item name
+ `type`: `PHYSICAL` (enum, optional) - Item Type
    + `PHYSICAL`
    + `DISCOUNT`
    + `SHIPPING_FEE`
    + `SALES_TAX`
    + `DIGITAL`
    + `GIFT_CARD`
    + `STORE_CREDIT`
    + `FEE`
    + `INSURANCE`
+ `quantity`: 1 (number, optional) - (positive float/decimal up to 3 decimal places) Item quantity. If empty, considered as whole item quantity is selected

## FileRequest (object)

### Properties
+ `filename`: `invoice.pdf` (string, optional) - (max length 100) File name. Is highly recommended to send filename value. Otherwise is used default filename value with guessed postfix.
+ One Of
    + `content`: `RmlsZSBjb250ZW50cy4gwq9cXyjjg4QpXy/Crw==` (string, required) - File content (Base64 encoded, maximum size of encoded string is 500kB)
    + `url`: `https://www.partner.com/file?id=12345` (string, required) - File URL.


## FileResponse (object)

### Properties
+ `filename`: `invoice.pdf` (string, required) - (max length 100) File name.
+ `url`: `https://www.partner.com/file?id=12345` (string, required) - File URL.


## PrivateFileResponse (object)

### Properties
+ `filename`: `invoice.pdf` (string, required) - (max length 100) File name.
+ `url`: `https://www.partner.com/file?id=12345` (string, required) - File URL (URL is accessible only 1 hour from its generation for security reasons)


## DocumentRequest (object)
Attached document (e.g. invoice, credit note etc.)

### Properties
+ `type` (enum, required) - Type of the document
    + `INVOICE` - Invoice
    + `PROFORMA_INVOICE` - Proforma invoice
    + `CREDIT_NOTE` - Credit note
    + `OTHER` - Other document type
+ `file` (FileRequest, required) - Attached file
+ `description`: `This is an invoice` (string, optional) - File description
+ `extraData` (DocumentExtraData, optional) - Additional data, if applicable

## DocumentResponse (object)
Attached document (e.g. invoice, credit note etc.)

### Properties
+ `type` (enum, required) - Type of the document
    + `INVOICE` - Invoice
    + `PROFORMA_INVOICE` - Proforma invoice
    + `CREDIT_NOTE` - Credit note
    + `OTHER` - Other document type
+ `file` (PrivateFileResponse, required) - Attached file
+ `description`: `This is an invoice` (string, optional) - File description
+ `extraData` (DocumentExtraData, optional) - Additional data, if applicable

## DocumentExtraData (object)

### Properties
+ `variableSymbol`: `1234567890` (string, optional) - Variable symbol of this document (proforma, invoice, ...)

## InvoiceInfo (object)
Billing information, to be included in invoice.

### Properties
+ `fullName`: `Ing. Jan Novák, Csc.` (string, optional) - Customer full name, including academical degrees and salutation (Mr./Mrs./..). Empty if requested via customerDueDateCategory.
+ `address` (Address, optional) - Billing address.
+ `dueDate`: `2017-06-20` (string, required) - Invoice due date.
+ `accountNumber` (AccountNumber, required) - Invoice account number.

## AccountNumber (object)
Account number with bank code.

### Properties
+ `accountNumber`: `123-123456789` (string, required) - Account number (IBAN, BIC, etc.).
+ `bankCode`: `0100` (string, required) - Bank code (SWIFT, etc.).


## Limits (object)
Customer's limits

### Properties
+ `availableLimit` (Amount, required) - Customer's available limit
+ `totalLimit` (Amount, required) - Customer's global limit


## Payment (object)
Payment information

### Properties
+ `paymentId`: `1a12` (string, required) - unique payment identifier
+ `date`: `2017-05-20` (string, required) - Payment date
+ `applicationId`: `11200a0ee1` (string, required) - Application ID that this payment belongs to
+ `value` (Amount, required) - Payment amount
+ `variableSymbol`: `1234567890` (string, optional) - Payment variable symbol
+ `invoice` (InvoiceInfo, optional) - Invoice data.

## MerchantUrls (object)
Collection of URLs used for redirection of a customer back to a partner website or as a notification endpoint.
Services that should be developed and exposed by partner e-shops to allow Skip Pay to asynchronously inform these partners about important changes regarding particular applications and orders.

### Properties
+ `approvedRedirect`: `http://www.yourEshop.com/paymentApproved.html` (string, required) - (max length 512) URL of the partner used for redirection of the customer back to partner website (from Skip Pay gateway) after application approval. Do not implement any business logic on accessing this URL by customer. Implement business logic to READY notification via `notificationEndpoint`.
+ `rejectedRedirect`: `http://www.yourEshop.com/paymentRejected.html` (string, required) - (max length 512) URL of the partner used for redirection of the customer back to partner website (from Skip Pay gateway) after application rejection.  Do not implement any business logic on accessing this URL by customer. Implement business logic to REJECTED notification via `notificationEndpoint`.
+ `notificationEndpoint`: `http://www.yourEshop.com/notifications` (string, required) - (max length 512) URL of the partner used as a notification endpoint for obtaining important updates about application (approval, rejection, storno, etc.).
+ `paymentsEndpoint`: `http://www.yourEshop.com/paymentNotification` (string, optional) - (max length 512) URL of the partner used as a notification endpoint for obtaining information about payments connected with application.

## PrecheckCustomerRequest (CustomerBase)
Customer data

### Properties
+ `firstName`: `John` (string, optional) - (max length 60) Customer first (given) name. Must be paired with `lastName`. Required if `fullName` is empty.
+ `lastName`: `Newborn` (string, optional) - (max length 60) Customer last (family) name. Must be paired with `firstName`. Required if `fullName` is empty.
+ `fullName`: `Ing. John Newborn, Csc.` (string, optional) - (max length 240) Customer full name, including academical degrees and salutation. Required only if `firstName` or `lastName` are empty.
+ `phone`: `+420123456789` (string, required) - (max length 13) Phone number with country code (including leading `+`).
+ `addresses` (array[PrecheckAddress], optional) - Addresses. All types are allowed.

## PrecheckRequest (object)
Precheck data (has similar structure as `Application`).

### Properties
+ `customer` (PrecheckCustomerRequest, required) - Customer data
+ `order` (PrecheckOrderRequest, optional) - Order data
+ `type` (enum, optional) - Financing type, if type is not sent `DEFERRED_PAYMENT` is selected.
    + `DEFERRED_PAYMENT` - Pay later ("zaplať později")
    + `PAY_IN_THREE` - Pay in three ("třetinka")

## PrecheckAddress (object)
Address information for precheck validation

### Properties
+ `name`: `John Doe` (string, optional) - Name on address
+ `country`: `CZ` (string, optional)

    Country.

    (see [ISO 3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))

+ `city`: `Prague` (string, optional) - (max length 100) City.
+ `streetAddress`: `Letenská` (string, optional) - (max length 100) Street/city part.
+ `streetNumber`: `22` (string) - (max length 50) Street number
+ `zip`: `140 00` (string, optional) - (max length 30) Postal code
+ `addressType` (enum, optional) - Type of the address. Only some of the types are allowed in each context.
    + `PERMANENT` - Permanent residential address
    + `CONTACT` - Contact address
    + `DELIVERY` - Delivery address
    + `BILLING` - Billing address


## PrecheckOrderAddress (Address)
Order address information for precheck validation

### Properties
+ `addressType` (enum, optional) - Type of the address. Only some of the types are allowed in each context.
    + `DELIVERY` - Delivery address
    + `BILLING` - Billing address

## PrecheckOrderItemRequest (object)
Order item information for precheck validation

### Properties
+ `code`: `EXC4677-1a` (string, optional) - (max length 200) Internal code for item (internal to e-shop). Used to better identify the item for future changes
+ `ean`: 888462064002 (string, optional) - (max length 64) EAN code.
+ `name`: `iPhone 6s 32GB SpaceGray` (string, optional) - (max length 255) Item name
+ `type` (enum, optional) - Item type
    + `PHYSICAL`
    + `DISCOUNT`
    + `SHIPPING_FEE`
    + `SALES_TAX`
    + `DIGITAL`
    + `GIFT_CARD`
    + `STORE_CREDIT`
    + `FEE`
    + `INSURANCE`
+ `variant`: `32GB SpaceGray` (string, optional) - (max length 250) Item variant
+ `description`: `Mobile phone with 32GB of RAM` (string, optional)
+ `producer`: `Apple` (string, optional) - (max length 250)
+ `categories`: `mobile phones`,`FullHD`, `64GB` (array[string], optional) - List of item categories
+ `totalPrice` (Amount, optional) - Total price for all pieces, VAT inclusive. Can be both positive (goods, ...) or negative (discount, ...) or `0`.
+ `totalVat` (VatAmount, optional) - Total VAT amount for all pieces. Can be both positive (goods, ...) or negative (discount, ...) or `0` (if `vatRate` is `0`).
+ `productUrl`: `https://www.example.com?itemId=10` (string, optional) - (max length 200) URL of the item in e-shop
+ `unitPrice` (Amount, optional) - Price per one piece, VAT inclusive. If empty, automatically considered that `unitPrice` is `totalPrice` / `quantity`. Can be both positive (goods, ...) or negative (discount, ...).
+ `unitVat` (VatAmount, optional) - VAT amount per one piece. If empty, automatically considered that `unitVat` is `totalVat` / `quantity`.
+ `quantity`: 1 (number, optional) - (positive float/decimal up to 3 decimal places) Item quantity. If empty, considered as 1.


## PrecheckOrderRequest (object)
Order information for precheck validation

### Properties
+ `number`: `AA234` (string, optional) - (max length 100) Order number (internal for e-shop)
+ `variableSymbols` (array[string], optional) - (max length 10)  Variable symbols for pairing. First symbol in array is used for making the payment to your account (if not specified later in `Mark order items as sent` or `Mark order items as delivered`) or we expect you make payment on our account with this symbol (if not specified later in `Mark order items as returned` operation). Strings must contain only numbers, maximum length is 10 characters (digits).
+ `totalPrice` (Amount, optional) - Total order amount, including VAT
+ `totalVat` (array[VatAmount], optional) - Total VAT amounts split by their VAT rates
+ `addresses` (array[PrecheckOrderAddress], optional) - Addresses. Only `BILLING` and `DELIVERY` types are allowed.
+ `deliveryType` (enum, optional) - Delivery type, for `DELIVERY_CARRIER` type can be further specified by `deliveryCarrier` attribute.
    + `DELIVERY_CARRIER` - If delivered by carrier - use `deliveryCarrier` for further specification.
    + `PERSONAL_BRANCH` - Personal collection at branch
    + `PERSONAL_PARTNER` - Personal collection at partner network
    + `ONLINE` - Online delivery (e.g. for intangible assets)
+ `deliveryCarrier` (DeliveryCarrier, optional) - Delivery carrier, when applicable.
+ `reservationDate`: `2017-07-15T00:00:00+02:00` (string, optional, nullable)

   Date and time until order is reserved.

   Until 'reservationDate' Skip Pay will try to notify partner with Application notification about approval or rejection.

   After this date and time, e-shop does not guarantee items availability (if application processing is longer, it may endanger order fullfillment).
+ `items` (array[PrecheckOrderItemRequest], optional) - Order items
+ `merchantId` (string, optional) - Merchant identification (ie. in case of multiple e-shops managed by one credentials)

## PrecheckResultResponse (object)
Precheck result.

### Properties
+ `type` (enum, required) - Precheck result type for Funding type.
    + `DEFERRED_PAYMENT` - Pay later ("zaplať později")
    + `PAY_IN_THREE` - Pay in three ("třetinka")
+ `recommendation` (boolean, required) - A recommendation of whether the order should be passed to the Skip Pay.
    true = Application is going to be likely approved.
    false = Application is going to be likely rejected.
+ `probabilityOfApproval` (number, required) - Probability of approval.
    0 = 0% to be approved
    1 = 100% to be approved

    Partner can create custom logic not to follow the recommendation (be more strict or benevolent).
+ `completeness` (number, optional) - Completness of the result. <0, 1> The lower is the value, the lower accuracy of the result.
+ `code`: OK (enum, required) - Result code.
    + `OK`
    + `UNKNOWN`
    + `NOT_AVAILABLE` - Funding type is not available.
    + `ADDITIONAL_DATA_SECURITY` - The customer will be asked to send additional data for security reasons.
    + `ADDITIONAL_DATA_LIMIT` - The customer has insufficient limit and will be asked to send additional data to increase limit.
    + `INSUFFICIENT_LIMIT` - The customer has insufficient limit and there is no way to increase it.
    + `INSUFFICIENT_LIMIT_OPPORTUNITY` - The customer has insufficient limit and can increase it by paying previous not paid orders.
    + `DETAILS_NOT_MATCHING` - We know the customer, but his personal details does not match with details in his Skip Pay account. Customer will be asked for correcting not matching details.
    + `MANUAL_VERIFICATION` - The validators cannot determine the result - manual checking is required.
+ `customerType` (enum, required) - Customer type.
    + `UNKNOWN` - Customer is uknown for Skip Pay.
    + `FIRST_ORDER` - Skip Pay knows the customer. Customer has no paid orders.
    + `FULL` -  Skip Pay knows the customer. Customer has at least one paid order.
    + `BLOCKED` - Skip Pay knows the customer. Customer is blocked.
+ `message` (string, optional) - Custom message for customer.
    Examples:
    “V Skip Pay peněžence nemáte dostatečný limit.”
    “Uveďte do objednávky jméno a příjmení, které používáte ve službě Skip Pay.”
    etc.
+ `additionalData` (array[string], optional) - List of additional data that customer has to send.
    Possible values in array: `PERSONAL_ID`, `ID_CARD_NO`, `ID_CARD_EXPIRY_DATE`, `ID_CARD_SCAN`, `THIRD_PARTY_TELCO_CONSENT`.

## PrecheckResultsResponse (object)
Precheck results.

### Properties
+ `id` (string, required) - Unique identificator of precheck. Send this identificator in ApplicationRequest for better approval rate.
+ `results` (array[PrecheckResultResponse], required) - Precheck results for each type of product.
+ `limits` (Limits, optional)
    Customer limits.
    Estimated in case we don!t know the customer.
    Current customer's limits in case we know him and customer give us an approval for their usage.

## ErrorResponse (object)
+ code: `ERR_1000_SOME_ERROR_CODE` (string, required) - Unique internal error code
+ message: `Some error/validation message description` (string, required) - Human readable error description (non-localized)
+ severity (enum, required)
    + ERROR - Critical error, execution cannot continue. This MUST be indicated also by appropriate HTTP status code
    + WARN - Non-critical error, execution can continue but further user interaction is advisable. This MIGHT be indicated also by appropriate HTTP status code
    + INFO - Information only, execution can continue without user interaction
+ attribute: `personalBirthNumber` (string, optional) - JSON path of request attribute that caused the error (if applicable)
+ ticketId: `UAT1:AMS:20160516-091658.450:45e4` (string, optional) - Internal ticket ID, used for error backtracking

## ErrorsResponse (object)
+ errors (array[ErrorResponse], fixed-type, required) - Array with errors

## PagingInfo (object)
+ itemsPerPage: 10 (number, required) - Number of items per page
+ nextPage: `transactions?sort=category&limit=10&after=25` (string, optional) - Request to retrieve next page, if it exists and can be unambiguously specified
+ prevPage: `transactions?sort=category&limit=10&before=25` (string, optional) - Request to retrieve previous page, if it exists and can be unambiguously specified

## HealthCheckResponse (object)
Health check response

### Properties
+ `projectVersion`: `Skip Pay 2.40.0` (string, optional) - Version of the project
